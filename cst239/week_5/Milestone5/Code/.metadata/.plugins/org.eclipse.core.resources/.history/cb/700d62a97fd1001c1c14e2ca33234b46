package MainApp;

import java.io.IOException;
import java.text.DecimalFormat;
import java.util.*;

import javax.swing.plaf.synth.Region;

public class StoreFront
{
	static Scanner mainScanner = new Scanner(System.in);
	static ProductListManager productListManager = new ProductListManager();
	static Cart cart = new Cart();
	private static final DecimalFormat balanceFormat = new DecimalFormat("0.00");
	static int mainInput;
	static float balance;
	static String topString;
	static boolean ascendingNameSort = false;
	static boolean ascendingPriceSort = false;
	static boolean descendingNameSort = false;
	static boolean descendingPriceSort = false;
	/**
	 * Main function where the lists get set and filled
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException 
	{
		int amountOfProducts = 50;
		List<String> stringCartList = new ArrayList<String>();
		List<Product> productCartList = new ArrayList<Product>();
		
		cart.SetCartList(stringCartList);
		cart.SetCartProducts(productCartList);
		
		List<String> stringProductList = new ArrayList<String>();
		List<Product> productList = new ArrayList<Product>();
		
		productListManager.SetList(stringProductList);
		productListManager.SetProducts(productList);
		
		List<String> singleProductList = FileManager.FileToStringList("Input.txt");
		
		productListManager.PopulateListFromStringList(singleProductList, amountOfProducts);
		
        balance = 100;
        mainInput = 0;
        
        while(mainInput != 3)
        {
            switch(mainInput)
            {
            	case 0: MenuMain(); break;
                case 1: ProductsMain(); break;
                case 2: CartMain(); break;
            }
        }
	}
	//======================================================================================================
	
	
	//Main Functions =======================================================================================
	
	/**
	 * Display Main Menu for User
	 */
	public static void MenuMain()
	{
		System.out.println("---------------------");
        System.out.println("Welcome to the Store!"
        		+ "\n 1: Products"
        		+ "\n 2: Cart: " + cart.GetItemsInCart()
        		+ "\n 3: Exit\n" + 
        		"Balance: $" + balanceFormat.format(balance));
        System.out.println("---------------------");
        mainInput = mainScanner.nextInt();
	}
	
	/**
	 * Starts the Products UI and enters product menu functions
	 */
	public static void ProductsMain()
	{
		int input = TypeDisplay();
		
		System.out.println("\nHow would you like to sort?"
				+ "\n 1: Name Ascending"  
				+ "\n 2: Name Descending"  
				+ "\n 3: Price Ascending"  
				+ "\n 4: Price Descending" 
				);
		
		int sortType = mainScanner.nextInt();
		SortTypesFalse();
		switch(sortType) 
		{
		case 1: ascendingNameSort = true; break;
		case 2: descendingNameSort = true; break;
		case 3: ascendingPriceSort = true; break;
		case 4: descendingPriceSort = true; break;
		default: mainInput = 1; return;
		}
		if(ProductMenu(input))
		{
			System.out.println("\n\nEnter number of what you want to add to cart!");
			int input2 = mainScanner.nextInt();
			Product product = ChooseProducts(input2);
			ProductToCart(product);
		}
		else 
		{
			mainInput = 0;
			return;
		}
	}
	
	/**
	 * Starts the Cart UI and enters cart menu functions
	 */
	public static void CartMain() 
	{
		SortTypesFalse();
		if(cart.GetCartList().size() > 0) 
		{
			DisplayMenu(true,cart.GetCartList(), cart.GetCartProducts(), null);
			System.out.println("\nDo you want to remove any products?\n 1: Yes\n 2: No");
			int input = mainScanner.nextInt();
			if(!RemoveProduct(input)) 
			{
				ConfirmCart();
			}
		}
		else
		{
			mainInput = 0;
		}
	}

	//======================================================================================================
	
	
	//Product Menu Functions ===============================================================================
	
	/**
	 * Displays a grouped type of products for user to choose from
	 * @return User's choice
	 */
	private static int TypeDisplay() 
	{
		System.out.println("What type of product are you looking for?"
				+ "\n 1: Animal Products: " + productListManager.GetProductTypeCount("Animal")
				+ "\n 2: Grain Products: " + productListManager.GetProductTypeCount("Grain")
				+ "\n 3: Snack Products: " + productListManager.GetProductTypeCount("Snack")
				+ "\n 4: Beverage Products: " + productListManager.GetProductTypeCount("Beverage")
				+ "\n 5: Dairy Products: " + productListManager.GetProductTypeCount("Dairy")
				+ "\n 6: Produce Products: " + productListManager.GetProductTypeCount("Produce")
				+ "\n 7: Premade Products: " + productListManager.GetProductTypeCount("Premade")
				+ "\n 8: Back To Menu"
				);
		
		int input = mainScanner.nextInt();
		return input;
	}
	
	/**
	 * Displays products and different product types
	 * @param input User input from scanner
	 * @return True or False based on User input
	 */
	public static boolean ProductMenu(int input) 
	{
		List<String> currentListToDisplay = new ArrayList<String>();
		
		String typeString = null;

		if(input <= 8 && input >= 1) 
		{
			switch(input) 
			{
			case 1: typeString = "Animal"; break;
			case 2: typeString = "Grain"; break;
			case 3: typeString = "Snack"; break;
			case 4: typeString = "Beverage"; break;
			case 5: typeString = "Dairy"; break;
			case 6: typeString = "Produce"; break;
			case 7: typeString = "Premade"; break;
			case 8: return false;
			}
			
			for(int i = 0; i < productListManager.GetList().size(); i++)
			{
				String[] splitString = productListManager.GetList().get(i).split("-");
				String type = splitString[3];
				if(type.equals(typeString)) 
				{
					currentListToDisplay.add(productListManager.GetList().get(i));
				}
				
			}
			if(currentListToDisplay.size() <= 0) 
			{
				System.out.println("All out of " + typeString + " Products");
				return false;
			}
			DisplayMenu(false,currentListToDisplay, productListManager.GetProducts(), typeString);
        	return true;
		}
		else 
		{
			System.out.println("Input did not equal an option");;
			return false;
		}
	}
	
	/**
	 * Allows user to select a Product from displayed menu
	 * @param input User input from scanner
	 * @return Returns chosen Product
	 */
	public static Product ChooseProducts(int input) 
	{
		Product chosenProduct = productListManager.GetProducts().get(input - 1);
		productListManager.RemoveItemFromList(chosenProduct.ProductToString(chosenProduct), cart.GetCartList());
		
		return chosenProduct;
	}
	
	/**
	 * Adds the Product to cart and asks whether the User wants to continue shopping or not
	 * @param itemToBeInCart Takes a Product that the User chose
	 */
	public static void ProductToCart(Product itemToBeInCart) 
	{
		cart.IncreasePaymentNeeded(itemToBeInCart.GetPrice());
		cart.IncreaseItemsInCart(1);
		System.out.println("\n" + itemToBeInCart.GetName() +" successfully added to cart!");
		
		System.out.println("\nDo you want to continue shopping?\n 1: Yes\n 2: No");
		String inputString = mainScanner.next();
		switch (inputString)
		{
		case "1": mainInput = 1; break; 
		case "2": mainInput = 0; break;
		}
	}
	
	//======================================================================================================
	
	
	//Cart Menu Functions ==================================================================================
	
	/**
	 * Removes a product from the cart
	 * @param input User input from scanner
	 * @return True or False based on whether User removed a Product or not
	 */
	public static boolean RemoveProduct(int input) 
	{
		switch (input)
		{
		case 1: 
			System.out.println("\nEnter number of product you want to remove");
			int input2 = mainScanner.nextInt();
			Product chosenProduct = cart.GetCartProducts().get(input2 - 1);
			cart.DecreaseItemsInCart(1);
			cart.DecreasePaymentNeeded(cart.GetCartProducts().get(input2 - 1).GetPrice() / 
									   cart.GetCartProducts().get(input2 - 1).GetQuantity());
			cart.RemoveItemFromCart(chosenProduct.ProductToString(chosenProduct), productListManager.GetList());
			return true;
		case 2: return false;
		}
		return false;
	}

	/**
	 * Asks the User to if they are ready to purchase the Products
	 */
	public static void ConfirmCart() 
	{
		boolean amountGreaterThanOne = cart.GetItemsInCart() > 1;
		
		String purchaseString = amountGreaterThanOne? 
				"\nReady to purchase your products for $" + cart.GetPaymentNeeded() 
				+ "?\n 1: Yes\n 2: No" 
				: "\nReady to purchase your product for $" + cart.GetPaymentNeeded() 
				+ "?\n 1: Yes\n 2: No";
		
		System.out.println(purchaseString);
		
		int input = mainScanner.nextInt();
		PurchaseProductsInCart(input);
	}
	
	/**
	 * Removes balance from User and removes all Products from the Cart
	 * @param input User input from scanner
	 */
	public static void PurchaseProductsInCart(int input) 
	{		
		boolean amountGreaterThanOne = cart.GetItemsInCart() > 1;
		switch (input)
		{
		case 1: 
			if(cart.GetItemsInCart() >= 0 && balance >= cart.GetPaymentNeeded())
			{
				balance -= cart.GetPaymentNeeded();
				String finalString = amountGreaterThanOne?
						"\n\nProducts Purchased for $" + cart.GetPaymentNeeded() +"!"
						+ "\nNew Balance: $" + balanceFormat.format(balance)
						: "\n\nProduct Purchased for $" + cart.GetPaymentNeeded() +"!"
						+ "\nNew Balance: $" + balanceFormat.format(balance);
				System.out.println(finalString);
				
				cart.GetCartList().clear();
				cart.SetItemsInCart(0);
				cart.SetPaymentNeeded(0);
			}
			else 
			{
				System.out.println("Not Enough Money...");
			}
			break;
		}
		mainInput = 0;
	}
	
	//======================================================================================================
	
	
	//Menu Display Functions ===============================================================================
	
	/**
	 * Displays a reusable menu, which is used to display Products and the Cart
	 * @param cartMenu Boolean that keeps track whether this menu is for the Cart or Products
	 * @param stringList List<String> that holds the database of menu
	 * @param productList List<Product> that gets produced from stringList
	 * @param type For Products only, it is the type of category that the User is entering
	 */
	public static void DisplayMenu(boolean cartMenu, List<String> stringList, List<Product>  productList, String type)
	{
		UpdateTopString(cartMenu, type);
		System.out.println(topString);
		int count = 1;
		productListManager.StringToProductList(stringList, cartMenu, productList);
		Collections.sort(stringList);
		Collections.sort(productList);
		Product[] productsGeneric = productList.toArray(new Product[0]);
		for(int i = 0 ; i < productsGeneric.length; i ++)
		{
			System.out.println("------" + count + "------");
			System.out.println(productsGeneric[i].GetName()); 
			if(!cartMenu) System.out.println(productsGeneric[i].GetDescription()); 
			System.out.println("$" + productsGeneric[i].GetPrice()); 
			System.out.println("Quantity: " + productsGeneric[i].GetQuantity()); 
			System.out.println(count < 9 ? "-------------" : "--------------");
			count++;
		}
	}
	
	/**
	 * Updates the string that gets displayed above the menus
	 * @param cartR Boolean to check if it is the cart or not
	 * @param type For Products only, it is the type of category that the User is entering
	 */
	public static void UpdateTopString(boolean cartR, String type) 
	{
		if(cartR) 
		{
			topString = "======== Cart " + cart.GetItemsInCart() + " ========";
		}
		else 
		{
			topString = "======== " + type + " Products ========";
		}
	}
	
	/**
	 * 
	 */
	private static void SortTypesFalse() 
	{
		ascendingNameSort = false;
		descendingNameSort = false;
		ascendingPriceSort = false;
		descendingPriceSort = false;
	}
	//======================================================================================================
}
